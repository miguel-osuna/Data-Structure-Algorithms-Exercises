""" Fraction data type class """


def gcd(m, n):
    """Finds the greatest common divisor of two numbers.
    
    Args:
        m (int): first number
        n (int): seconds number
    
    Returns:
        (int): greatest common divisor  
    """

    while m % n != 0:
        oldm = m
        oldn = n

        m = oldn
        n = oldm % oldn
    return n


class Fraction(object):
    """Fraction class.
    
    Args:
        top (int): Numerator
        bottom (int): Denominator

    Attributes:
        top (int): Numerator
        bottom (int): Denominator
    """

    def __init__(self, top, bottom):
        """Fraction __init__ method.
        
        Args:
            top (int): Numerator
            bottom (int): Denominator
        
        Returns:
            None

        """
        if type(top) != type(1):
            raise Exception("The numerator should be an integer")

        elif type(bottom) != type(1):
            raise Exception("The denominator should be an integer")

        common = gcd(top, bottom)
        self.num = top // common
        self.den = bottom // common

    def __str__(self):
        """Fraction __str__ method.
        
        Returns:
            (str): String representation of the fraction
        """
        return str(self.num) + "/" + str(self.den)

    def __add__(self, other):
        """Fraction __add__ method.
        
        Args:
            other (Fraction): Fraction variable
        
        Returns:
            (Fraction): New fraction generated by an addition
        """
        new_num = self.num * other.den + self.den * other.num
        new_den = self.den * other.den
        return Fraction(new_num, new_den)

    def __sub__(self, other):
        """Fraction __sub__ method.
        
        Args:
            other (Fraction): Fraction variable
        
        Returns:
            (Fraction): New fraction generated by a subtraction
        """

        new_num = self.num * other.den - self.den * other.num
        new_den = self.den * other.den
        return Fraction(new_num, new_den)

    def __mul__(self, other):
        """Fraction __mul__ method.
        
        Args:
            other (Fraction): Fraction variable
        
        Returns:
            (Fraction): New fraction generated by a multiplication
        """

        new_num = self.num * other.num
        new_den = self.den * other.num
        return Fraction(new_num, new_den)

    def __truediv__(self, other):
        """Fraction __truediv__ method.
        
        Args:
            other (Fraction): Fraction variable
        
        Returns:
            (Fraction): New fraction generated by a division
        """
        new_num = self.num * other.den
        new_den = self.den * other.num
        return Fraction(new_num, new_den)

    def __eq__(self, other):
        """Fraction __eq__ method.
        
        Args:
            other (Fraction): Fraction variable
        
        Returns:
            (Fraction): New fraction generated by an equality comparisson
        """
        first_num = self.num * other.den
        second_num = other.num * self.den
        return first_num == second_num

    def __ne__(self, other):
        """Fraction __ne__ method.
        
        Args:
            other (Fraction): Fraction variable
        
        Returns:
            (Fraction): New fraction generated by a not equal comparisson
        """

        first_num = self.num * other.den
        second_num = other.num * self.den
        return first_num != second_num

    def __lt__(self, other):
        """Fraction __lt__ method.
        
        Args:
            other (Fraction): Fraction variable
        
        Returns:
            (Fraction): New fraction generated by a less than comparisson
        """
        if self.num / self.den < other.num / other.den:
            return True
        else:
            return False

    def __le__(self, other):
        """Fraction __le__ method.
        
        Args:
            other (Fraction): Fraction variable
        
        Returns:
            (Fraction): New fraction generated by a less than or equal comparisson
        """
        if self.num / self.den <= other.num / other.den:
            return True
        else:
            return False

    def __gt__(self, other):
        """Fraction __gt__ method.
        
        Args:
            other (Fraction): Fraction variable
        
        Returns:
            (Fraction): New fraction generated by a greater than comparisson
        """
        if self.num / self.den > other.num / other.den:
            return True
        else:
            return False

    def __ge__(self, other):
        """Fraction __ge__ method.
        
        Args:
            other (Fraction): Fraction variable
        
        Returns:
            (Fraction): New fraction generated by a greater than comparisson
        """
        if self.num / self.den >= other.num / other.den:
            return True
        else:
            return False

    def show(self):
        """ Prints the representation of the Fraction. """
        print(self.num, "/", self.den)

    def get_num(self):
        """Returns the numerator of the fraction.
        
        Returns:
            (int): Returns the numerator
        """
        return self.num

    def get_den(self):
        """Returns the denominator of the fraction
        
        Returns:
            int: Returns the denominator
        """
        return self.den


def main():
    x = Fraction(1, -3)
    y = Fraction(2, 3)
    print(x)
    print(y)
    print(x + y)
    print(x == y)
    print(x * y)
    print(x > y)
    print(x < y)
    print(x - y)
    print(x.get_num())
    print(x.get_den())


if __name__ == "__main__":
    main()
